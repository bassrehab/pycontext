"""
tests/unit/core/agents/test_procedural_agent.py

Tests for the Procedural Agent module.
"""
import unittest
import asyncio
from unittest.mock import MagicMock, patch
import json

from pycontext.core.agents.procedural_agent import ProceduralAgent
from pycontext.core.memory.procedural_memory import (
    ProceduralMemory, Procedure, ProcedureStep, ProcedureStatus, StepStatus
)


class TestProceduralAgent(unittest.TestCase):
    """Test the Procedural Agent implementation."""

    def setUp(self):
        """Set up test fixtures."""
        # Create mock LLM client
        self.mock_llm = MagicMock()
        self.mock_llm.return_value = "Mock LLM response"
        
        # Mock the _process_with_llm method
        self.process_with_llm_patcher = patch.object(
            ProceduralAgent, '_process_with_llm', 
            new=self.mock_process_with_llm
        )
        self.process_with_llm_patcher.start()
        
        # Create procedural memory
        self.memory = ProceduralMemory()
        
        # Create agent
        self.agent = ProceduralAgent(
            agent_id="test_procedural_agent",
            llm_client=self.mock_llm,
            procedural_memory=self.memory
        )
        
        # Register mock action handlers
        self.agent.register_action_handler("test_action", self.mock_test_action)
        
        # Initialize session
        asyncio.run(self.agent.initialize_session())
        
        # Create a test procedure
        self.create_test_procedure()

    def tearDown(self):
        """Clean up after tests."""
        self.process_with_llm_patcher.stop()

    async def mock_process_with_llm(self, context, prompt):
        """Mock implementation of _process_with_llm."""
        if "determine_action" in prompt.lower():
            if "execute" in prompt.lower() and "test procedure" in prompt.lower():
                return json.dumps({
                    "type": "execute_procedure",
                    "procedure_id": self.procedure_id
                })
            elif "list" in prompt.lower():
                return json.dumps({
                    "type": "list_procedures"
                })
            elif "explain" in prompt.lower():
                return json.dumps({
                    "type": "explain_procedure",
                    "procedure_id": self.procedure_id
                })
            elif "create" in prompt.lower():
                return json.dumps({
                    "type": "create_procedure"
                })
            else:
                return json.dumps({
                    "type": "unknown"
                })
        elif "create" in prompt.lower() and "procedure" in prompt.lower():
            return json.dumps({
                "name": "Generated Procedure",
                "description": "A procedure generated by the LLM",
                "tags": ["generated", "test"],
                "steps": [
                    {
                        "name": "Step 1",
                        "description": "Generated step 1",
                        "action": {
                            "type": "test_action",
                            "value": 10
                        }
                    },
                    {
                        "name": "Step 2",
                        "description": "Generated step 2",
                        "action": {
                            "type": "test_action",
                            "value": 20
                        },
                        "dependencies": ["Step 1"]
                    }
                ]
            })
        elif "llm_query" in prompt.lower():
            return "LLM response for query"
        else:
            return "Default mock LLM response"

    async def mock_test_action(self, action, inputs):
        """Mock test action handler."""
        value = action.get("value", 0)
        input_value = inputs.get("input_value", 0)
        result = value + input_value
        return {"status": "success", "outputs": {"result": result}}

    def create_test_procedure(self):
        """Create a test procedure in memory."""
        builder = self.memory.create_procedure_builder()
        self.procedure_id = builder\
            .set_name("Test Procedure")\
            .set_description("A test procedure")\
            .add_tag("test")\
            .add_input("input_value", 5)\
            .add_step(
                name="Step 1",
                description="First step",
                action={"type": "test_action", "value": 10}
            )\
            .add_step(
                name="Step 2",
                description="Second step",
                action={"type": "test_action", "value": 20},
                dependencies=["step1"]
            )\
            .build()

    def test_initialization(self):
        """Test agent initialization."""
        self.assertEqual(self.agent.agent_id, "test_procedural_agent")
        self.assertEqual(self.agent.role, "procedural_agent")
        self.assertIsNotNone(self.agent.procedural_memory)
        self.assertIsNone(self.agent.active_procedure_id)

    def test_load_role_prompt(self):
        """Test loading the role prompt."""
        prompt = asyncio.run(self.agent._load_role_prompt())
        
        # Check that prompt contains key elements
        self.assertIn("Procedural Agent", prompt)
        self.assertIn("executing step-by-step procedures", prompt)
        self.assertIn("track execution state", prompt)

    def test_process_for_execute_procedure(self):
        """Test processing a request to execute a procedure."""
        # Test execution request
        response = asyncio.run(self.agent.process("Execute the Test Procedure"))
        
        # Check response
        self.assertIn("response", response)
        self.assertEqual(response["procedure_id"], self.procedure_id)
        self.assertIn("status", response)

    def test_process_for_list_procedures(self):
        """Test processing a request to list procedures."""
        # Test list request
        response = asyncio.run(self.agent.process("List available procedures"))
        
        # Check response
        self.assertIn("response", response)
        self.assertIn("procedures", response)
        self.assertEqual(len(response["procedures"]), 1)
        self.assertEqual(response["procedures"][0]["name"], "Test Procedure")

    def test_process_for_explain_procedure(self):
        """Test processing a request to explain a procedure."""
        # Test explain request
        response = asyncio.run(self.agent.process("Explain the Test Procedure"))
        
        # Check response
        self.assertIn("response", response)
        self.assertIn("procedure", response)
        self.assertEqual(response["procedure"]["name"], "Test Procedure")
        self.assertEqual(len(response["procedure"]["steps"]), 2)

    def test_process_for_create_procedure(self):
        """Test processing a request to create a procedure."""
        # Test create request
        response = asyncio.run(self.agent.process("Create a new procedure that adds two numbers"))
        
        # Check response
        self.assertIn("response", response)
        self.assertIn("procedure_id", response)
        self.assertIn("procedure_def", response)
        self.assertEqual(response["procedure_def"]["name"], "Generated Procedure")

    def test_execute_procedure(self):
        """Test executing a procedure."""
        # Execute a procedure
        result = asyncio.run(self.agent.execute_procedure(
            self.procedure_id,
            inputs={"input_value": 15}
        ))
        
        # Check results
        self.assertTrue(result["success"])
        self.assertEqual(result["status"], "completed")
        self.assertIn("result", result)
        
        # Check that outputs match expectations
        self.assertEqual(result["result"]["steps_completed"], 2)
        self.assertEqual(result["result"]["total_steps"], 2)
        
        # Check outputs from steps
        step_results = {step["name"]: step["result"]["outputs"]["result"] for step in result["result"]["steps"]}
        self.assertEqual(step_results["Step 1"], 25)  # 10 + 15
        self.assertEqual(step_results["Step 2"], 35)  # 20 + 15

    def test_create_procedure(self):
        """Test creating a procedure."""
        # Create a procedure
        result = asyncio.run(self.agent.create_procedure(
            name="Custom Procedure",
            description="A custom procedure",
            steps=[
                {
                    "name": "Custom Step 1",
                    "description": "First custom step",
                    "action": {"type": "test_action", "value": 100}
                },
                {
                    "name": "Custom Step 2",
                    "description": "Second custom step",
                    "action": {"type": "test_action", "value": 200},
                    "dependencies": ["Custom Step 1"]
                }
            ],
            tags=["custom", "test"]
        ))
        
        # Check results
        self.assertTrue(result["success"])
        self.assertIn("procedure_id", result)
        
        # Check that procedure was added to memory
        procedure = self.memory.get_procedure(result["procedure_id"])
        self.assertIsNotNone(procedure)
        self.assertEqual(procedure.name, "Custom Procedure")
        self.assertEqual(len(procedure.steps), 2)
        
        # Check that tags were applied
        procedures_with_tag = self.memory.get_procedures_by_tag("custom")
        self.assertEqual(len(procedures_with_tag), 1)
        self.assertEqual(procedures_with_tag[0].id, result["procedure_id"])

    def test_determine_action(self):
        """Test determining actions from user input."""
        # Test with different inputs
        test_cases = [
            {
                "input": "execute test procedure",
                "expected_type": "execute_procedure",
                "expected_id": self.procedure_id
            },
            {
                "input": "list all procedures",
                "expected_type": "list_procedures"
            },
            {
                "input": "explain test procedure",
                "expected_type": "explain_procedure",
                "expected_id": self.procedure_id
            },
            {
                "input": "create a procedure",
                "expected_type": "create_procedure"
            },
            {
                "input": "hello there",
                "expected_type": "unknown"
            }
        ]
        
        for case in test_cases:
            action = asyncio.run(self.agent._determine_action(case["input"]))
            self.assertEqual(action["type"], case["expected_type"])
            if "expected_id" in case:
                self.assertEqual(action["procedure_id"], case["expected_id"])

    def test_llm_handler(self):
        """Test the LLM query action handler."""
        # Test with simple query
        result = asyncio.run(self.agent._handle_llm_query(
            action={"prompt": "Test query {input}"},
            inputs={"input": "value"}
        ))
        
        # Check results
        self.assertEqual(result["status"], "success")
        self.assertIn("response", result["outputs"])
        
        # Test with JSON extraction
        result = asyncio.run(self.agent._handle_llm_query(
            action={"prompt": "Test query", "extract_json": True},
            inputs={}
        ))
        
        # Check results
        self.assertEqual(result["status"], "success")
        self.assertIn("response", result["outputs"])

    def test_input_validation_handler(self):
        """Test the input validation action handler."""
        # Test with valid input
        result = asyncio.run(self.agent._handle_input_validation(
            action={
                "validations": [
                    {
                        "field": "number",
                        "rules": [
                            {"type": "required"},
                            {"type": "type", "value": "number"},
                            {"type": "min", "value": 5},
                            {"type": "max", "value": 15}
                        ]
                    }
                ]
            },
            inputs={"number": 10}
        ))
        
        # Check results
        self.assertEqual(result["status"], "success")
        self.assertTrue(result["outputs"]["valid"])
        
        # Test with invalid input
        result = asyncio.run(self.agent._handle_input_validation(
            action={
                "validations": [
                    {
                        "field": "number",
                        "rules": [
                            {"type": "min", "value": 20}
                        ]
                    }
                ]
            },
            inputs={"number": 10}
        ))
        
        # Check results
        self.assertEqual(result["status"], "error")
        self.assertFalse(result["outputs"]["valid"])
        self.assertGreater(len(result["outputs"]["errors"]), 0)

    def test_conditional_handler(self):
        """Test the conditional action handler."""
        # Test with matching condition
        result = asyncio.run(self.agent._handle_conditional(
            action={
                "conditions": [
                    {
                        "field": "status",
                        "operator": "eq",
                        "value": "active",
                        "result": {"action": "proceed"}
                    },
                    {
                        "field": "status",
                        "operator": "eq",
                        "value": "inactive",
                        "result": {"action": "stop"}
                    }
                ],
                "default": {"action": "unknown"}
            },
            inputs={"status": "active"}
        ))
        
        # Check results
        self.assertEqual(result["status"], "success")
        self.assertEqual(result["outputs"]["action"], "proceed")
        
        # Test with non-matching condition
        result = asyncio.run(self.agent._handle_conditional(
            action={
                "conditions": [
                    {
                        "field": "status",
                        "operator": "eq",
                        "value": "active",
                        "result": {"action": "proceed"}
                    }
                ],
                "default": {"action": "unknown"}
            },
            inputs={"status": "pending"}
        ))
        
        # Check results
        self.assertEqual(result["status"], "success")
        self.assertEqual(result["outputs"]["action"], "unknown")


if __name__ == "__main__":
    unittest.main()